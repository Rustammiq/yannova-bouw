class MobileMenu {constructor() {this.menuToggle = document.getElementById('menu-toggle');this.navMenu = document.getElementById('nav-menu');this.isOpen = false;this.init()} init() {if (!this.menuToggle || !this.navMenu) return;this.menuToggle.addEventListener('click',() => this.toggleMenu());this.menuToggle.setAttribute('aria-expanded','false');this.menuToggle.setAttribute('aria-controls','nav-menu');document.querySelectorAll('.nav-menu a').forEach(link => {link.addEventListener('click',() => this.closeMenu())});document.addEventListener('click',(e) => {if (this.isOpen && !this.navMenu.contains(e.target) && !this.menuToggle.contains(e.target)) {this.closeMenu()} });document.addEventListener('keydown',(e) => {if (e.key === 'Escape' && this.isOpen) {this.closeMenu();this.menuToggle.focus()} })} toggleMenu() {this.isOpen = !this.isOpen;this.navMenu.classList.toggle('active',this.isOpen);this.menuToggle.setAttribute('aria-expanded',this.isOpen.toString());document.body.style.overflow = this.isOpen ? 'hidden' :''} closeMenu() {this.isOpen = false;this.navMenu.classList.remove('active');this.menuToggle.setAttribute('aria-expanded','false');document.body.style.overflow = ''} } const mobileMenu = new MobileMenu();class ContactForm {constructor() {this.form = document.querySelector('.contact-form');this.submitBtn = this.form?.querySelector('button[type="submit"]');this.init()} init() {if (!this.form) return;this.form.addEventListener('submit',(e) => this.handleSubmit(e));this.addValidationListeners();this.addAccessibilityFeatures()} addValidationListeners() {const fields = ['naam','email','bericht'];fields.forEach(fieldName => {const field = document.getElementById(fieldName);if (field) {field.addEventListener('blur',() => this.validateField(field));field.addEventListener('input',() => this.clearFieldError(field))} });const emailField = document.getElementById('email');if (emailField) {emailField.addEventListener('input',(e) => {this.validateEmailFormat(e.target)})} } validateField(field) {const value = field.value.trim();const fieldName = field.id;this.clearFieldError(field);if (!value) {this.showFieldError(field,`${this.getFieldLabel(fieldName)} is verplicht`);return false} switch (fieldName) {case 'email':if (!this.isValidEmail(value)) {this.showFieldError(field,'Voer een geldig emailadres in');return false} break;case 'bericht':if (value.length < 10) {this.showFieldError(field,'Bericht moet minimaal 10 tekens bevatten');return false} break} return true} validateEmailFormat(field) {const value = field.value.trim();if (value && !this.isValidEmail(value)) {this.showFieldError(field,'Voer een geldig emailadres in')} else {this.clearFieldError(field)} } isValidEmail(email) {const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;return emailRegex.test(email)} getFieldLabel(fieldName) {const labels = {naam:'Naam',email:'Email',telefoon:'Telefoon',bericht:'Bericht' };return labels[fieldName] || fieldName} showFieldError(field,message) {this.clearFieldError(field);const errorDiv = document.createElement('div');errorDiv.className = 'field-error';errorDiv.textContent = message;errorDiv.setAttribute('role','alert');field.classList.add('error');field.parentNode.appendChild(errorDiv);field.setAttribute('aria-invalid','true');field.setAttribute('aria-describedby',`${field.id}-error`);errorDiv.id = `${field.id}-error`} clearFieldError(field) {const existingError = field.parentNode.querySelector('.field-error');if (existingError) {existingError.remove()} field.classList.remove('error');field.removeAttribute('aria-invalid');field.removeAttribute('aria-describedby')} addAccessibilityFeatures() {const requiredFields = ['naam','email','bericht'];requiredFields.forEach(fieldName => {const field = document.getElementById(fieldName);if (field) {field.setAttribute('aria-required','true')} })} async handleSubmit(e) {e.preventDefault();const formData = {naam:document.getElementById('naam').value.trim(),email:document.getElementById('email').value.trim(),telefoon:document.getElementById('telefoon')?.value.trim() || '',bericht:document.getElementById('bericht').value.trim() };const isValid = Object.keys(formData).every(key => {const field = document.getElementById(key);return field ? this.validateField(field) :true});if (!isValid) {this.showNotification('Vul alle verplichte velden correct in','error');return} this.setLoadingState(true);try {const response = await this.submitForm(formData);if (response.success) {this.showNotification('Bedankt voor uw aanvraag! We nemen zo snel mogelijk contact met u op.','success');this.form.reset();this.clearAllErrors()} else {throw new Error(response.message || 'Er ging iets fout bij het verzenden')} } catch (error) {console.error('Form submission error:',error);this.showNotification('Er ging iets fout bij het verzenden. Probeer het later opnieuw.','error')} finally {this.setLoadingState(false)} } async submitForm(formData) {return new Promise((resolve) => {setTimeout(() => {const isSuccess = Math.random() > 0.2;resolve({success:isSuccess,message:isSuccess ? 'Formulier succesvol verzonden' :'Server error' })},1500)})} setLoadingState(loading) {if (this.submitBtn) {this.submitBtn.disabled = loading;this.submitBtn.innerHTML = loading ? '<i class="fas fa-spinner fa-spin"></i> Bezig met verzenden...' :'Verstuur bericht'} const formFields = this.form.querySelectorAll('input,textarea,button');formFields.forEach(field => {if (field !== this.submitBtn) {field.disabled = loading} })} showNotification(message,type = 'info') {const notification = document.createElement('div');notification.className = `notification notification-${type}`;notification.innerHTML = ` <div class="notification-content"> <span>${message}</span> <button class="notification-close" onclick="this.parentElement.parentElement.remove()"> <i class="fas fa-times"></i> </button> </div> `;const container = document.querySelector('.notification-container') || this.createNotificationContainer();container.appendChild(notification);setTimeout(() => {if (notification.parentNode) {notification.remove()} },5000);notification.setAttribute('role','alert');notification.setAttribute('aria-live','polite')} createNotificationContainer() {const container = document.createElement('div');container.className = 'notification-container';document.body.appendChild(container);return container} clearAllErrors() {const errorElements = this.form.querySelectorAll('.field-error');errorElements.forEach(error => error.remove());const errorFields = this.form.querySelectorAll('.error');errorFields.forEach(field => {field.classList.remove('error');field.removeAttribute('aria-invalid');field.removeAttribute('aria-describedby')})} } const contactForm = new ContactForm();document.querySelectorAll('a[href^="#"]').forEach(anchor => {anchor.addEventListener('click',function (e) {e.preventDefault();const target = document.querySelector(this.getAttribute('href'));if (target) {target.scrollIntoView({behavior:'smooth',block:'start' })} })});window.addEventListener('scroll',() => {const scrollTop = window.pageYOffset || document.documentElement.scrollTop;const scrollToTopBtn = document.getElementById('scroll-to-top');if (scrollTop > 300) {scrollToTopBtn.style.display = 'block'} else {scrollToTopBtn.style.display = 'none'} });class ScrollManager {constructor() {this.scrollToTopBtn = document.getElementById('scroll-to-top');this.observedSections = new Set();this.init()} init() {this.setupSmoothScrolling();this.setupScrollToTop();this.setupIntersectionObserver();this.setupScrollSpy()} setupSmoothScrolling() {document.querySelectorAll('a[href^="#"]').forEach(anchor => {anchor.addEventListener('click',(e) => {e.preventDefault();const targetId = anchor.getAttribute('href');const target = document.querySelector(targetId);if (target) {const headerHeight = document.querySelector('header')?.offsetHeight || 0;const targetPosition = target.offsetTop - headerHeight - 20;window.scrollTo({top:targetPosition,behavior:'smooth' });if (history.pushState) {history.pushState(null,null,targetId)} } })})} setupScrollToTop() {if (!this.scrollToTopBtn) return;let ticking = false;window.addEventListener('scroll',() => {if (!ticking) {requestAnimationFrame(() => {this.toggleScrollToTop();ticking = false});ticking = true} });this.scrollToTopBtn.addEventListener('click',() => {window.scrollTo({top:0,behavior:'smooth' });setTimeout(() => {document.querySelector('header')?.focus()},500)})} toggleScrollToTop() {const scrollTop = window.pageYOffset || document.documentElement.scrollTop;const shouldShow = scrollTop > 400;if (shouldShow && this.scrollToTopBtn.style.display !== 'flex') {this.scrollToTopBtn.style.display = 'flex';this.scrollToTopBtn.setAttribute('aria-hidden','false')} else if (!shouldShow && this.scrollToTopBtn.style.display !== 'none') {this.scrollToTopBtn.style.display = 'none';this.scrollToTopBtn.setAttribute('aria-hidden','true')} } setupIntersectionObserver() {const observerOptions = {threshold:0.1,rootMargin:'0px 0px -50px 0px' };const observer = new IntersectionObserver((entries) => {entries.forEach(entry => {if (entry.isIntersecting) {entry.target.classList.add('animate-in');observer.unobserve(entry.target)} })},observerOptions);document.querySelectorAll('.animate-on-scroll,.service-card,.about-text,.about-image').forEach(el => {observer.observe(el)})} setupScrollSpy() {const sections = document.querySelectorAll('section[id]');const navLinks = document.querySelectorAll('.nav-menu a[href^="#"]');if (sections.length === 0 || navLinks.length === 0) return;const observerOptions = {threshold:0.5,rootMargin:'-20% 0px -20% 0px' };const sectionObserver = new IntersectionObserver((entries) => {entries.forEach(entry => {if (entry.isIntersecting) {const sectionId = entry.target.id;navLinks.forEach(link => {link.classList.toggle('active',link.getAttribute('href') === `#${sectionId}`)})} })},observerOptions);sections.forEach(section => {sectionObserver.observe(section)})} } const scrollManager = new ScrollManager();class PerformanceMonitor {constructor() {this.init()} init() {window.addEventListener('load',() => {if ('performance' in window) {const perfData = performance.getEntriesByType('navigation')[0];const loadTime = perfData.loadEventEnd - perfData.fetchStart;if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {this.showPerformanceInfo(loadTime)} } });if ('PerformanceObserver' in window) {const observer = new PerformanceObserver((list) => {for (const entry of list.getEntries()) {if (entry.duration > 1000) {} } });observer.observe({entryTypes:['resource'] })} } showPerformanceInfo(loadTime) {const info = document.createElement('div');info.className = 'performance-info';info.innerHTML = ` <small style="position:fixed;bottom:10px;right:10px;background:rgba(0,0,0,0.8);color:white;padding:5px 10px;border-radius:3px;font-family:monospace;z-index:10000;"> Load time:${Math.round(loadTime)}ms </small> `;document.body.appendChild(info)} } if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {new PerformanceMonitor()} class Slideshow {constructor() {this.slides = document.querySelectorAll('.slide');this.dots = document.querySelectorAll('.dot');this.prevBtn = document.querySelector('.prev');this.nextBtn = document.querySelector('.next');this.currentSlide = 0;this.slideInterval = null;this.init()} init() {if (this.slides.length === 0) return;if (this.prevBtn) {this.prevBtn.addEventListener('click',() => this.prevSlide())} if (this.nextBtn) {this.nextBtn.addEventListener('click',() => this.nextSlide())} this.dots.forEach((dot,index) => {dot.addEventListener('click',() => this.goToSlide(index))});document.addEventListener('keydown',(e) => {if (e.key === 'ArrowLeft') this.prevSlide();if (e.key === 'ArrowRight') this.nextSlide()});this.addTouchSupport();this.startAutoPlay();const slideshowContainer = document.querySelector('.slideshow-container');if (slideshowContainer) {slideshowContainer.addEventListener('mouseenter',() => this.stopAutoPlay());slideshowContainer.addEventListener('mouseleave',() => this.startAutoPlay())} } showSlide(index) {this.slides.forEach(slide => slide.classList.remove('active'));this.dots.forEach(dot => dot.classList.remove('active'));if (this.slides[index]) {this.slides[index].classList.add('active')} if (this.dots[index]) {this.dots[index].classList.add('active')} this.currentSlide = index} nextSlide() {const nextIndex = (this.currentSlide + 1) % this.slides.length;this.showSlide(nextIndex)} prevSlide() {const prevIndex = (this.currentSlide - 1 + this.slides.length) % this.slides.length;this.showSlide(prevIndex)} goToSlide(index) {this.showSlide(index)} startAutoPlay() {this.stopAutoPlay();this.slideInterval = setInterval(() => {this.nextSlide()},5000)} stopAutoPlay() {if (this.slideInterval) {clearInterval(this.slideInterval);this.slideInterval = null} } addTouchSupport() {const slideshowContainer = document.querySelector('.slideshow-container');if (!slideshowContainer) return;let startX = 0;let startY = 0;let endX = 0;let endY = 0;slideshowContainer.addEventListener('touchstart',(e) => {startX = e.touches[0].clientX;startY = e.touches[0].clientY});slideshowContainer.addEventListener('touchend',(e) => {endX = e.changedTouches[0].clientX;endY = e.changedTouches[0].clientY;this.handleSwipe(startX,startY,endX,endY)})} handleSwipe(startX,startY,endX,endY) {const deltaX = endX - startX;const deltaY = endY - startY;const minSwipeDistance = 50;if (Math.abs(deltaX) > Math.abs(deltaY) && Math.abs(deltaX) > minSwipeDistance) {if (deltaX > 0) {this.prevSlide()} else {this.nextSlide()} } } } class VideoPlayer {constructor() {this.video = document.getElementById('main-video');this.playButton = document.querySelector('.play-button');this.videoWrapper = document.querySelector('.video-wrapper');this.init()} init() {if (!this.video || !this.playButton || !this.videoWrapper) return;this.playButton.addEventListener('click',() => this.togglePlay());this.video.addEventListener('play',() => this.onPlay());this.video.addEventListener('pause',() => this.onPause());this.video.addEventListener('ended',() => this.onEnded());this.video.addEventListener('click',() => this.togglePlay());this.video.addEventListener('keydown',(e) => {if (e.key === ' ' || e.key === 'Enter') {e.preventDefault();this.togglePlay()} })} togglePlay() {if (this.video.paused) {this.video.play()} else {this.video.pause()} } onPlay() {this.videoWrapper.classList.add('playing');this.playButton.innerHTML = '<i class="fas fa-pause"></i>'} onPause() {this.videoWrapper.classList.remove('playing');this.playButton.innerHTML = '<i class="fas fa-play"></i>'} onEnded() {this.videoWrapper.classList.remove('playing');this.playButton.innerHTML = '<i class="fas fa-play"></i>'} } document.addEventListener('DOMContentLoaded',() => {new Slideshow();new VideoPlayer()});class UIInteractionsManager {constructor() {this.observers = new Map();this.animations = new Map();this.init()} init() {this.setupIntersectionObserver();this.setupScrollAnimations();this.setupHoverEffects();this.setupFormInteractions();this.setupKeyboardNavigation();this.setupTouchInteractions();this.setupAccessibilityFeatures()} setupIntersectionObserver() {if (!('IntersectionObserver' in window)) return;const animationObserver = new IntersectionObserver((entries) => {entries.forEach(entry => {if (entry.isIntersecting) {entry.target.classList.add('animate-in');const siblings = Array.from(entry.target.parentNode.children);const index = siblings.indexOf(entry.target);entry.target.style.animationDelay = `${index * 0.1}s`} })},{threshold:0.1,rootMargin:'0px 0px -50px 0px' });document.querySelectorAll('.fade-in,.slide-in-left,.slide-in-right,.scale-in').forEach(el => {animationObserver.observe(el)});this.observers.set('animation',animationObserver)} setupScrollAnimations() {let ticking = false;const updateScrollAnimations = () => {const scrollTop = window.pageYOffset || document.documentElement.scrollTop;this.updateScrollToTopButton(scrollTop);this.updateHeaderBackground(scrollTop);this.updateParallaxElements(scrollTop);ticking = false};const requestTick = () => {if (!ticking) {requestAnimationFrame(updateScrollAnimations);ticking = true} };window.addEventListener('scroll',requestTick,{passive:true })} updateScrollToTopButton(scrollTop) {const scrollBtn = document.querySelector('.scroll-to-top-btn');if (!scrollBtn) return;if (scrollTop > 300) {scrollBtn.classList.add('visible')} else {scrollBtn.classList.remove('visible')} } updateHeaderBackground(scrollTop) {const header = document.querySelector('header');if (!header) return;const opacity = Math.min(scrollTop / 100,0.95);header.style.background = `rgba(26,26,26,${opacity})`} updateParallaxElements(scrollTop) {const parallaxElements = document.querySelectorAll('[data-parallax]');parallaxElements.forEach(el => {const speed = parseFloat(el.dataset.parallax) || 0.5;const yPos = -(scrollTop * speed);el.style.transform = `translateY(${yPos}px)`})} setupHoverEffects() {document.querySelectorAll('.btn-primary,.btn-secondary,.cta-button').forEach(btn => {btn.addEventListener('mouseenter',() => {btn.style.transform = 'translateY(-2px)';btn.style.boxShadow = '0 5px 15px rgba(0,0,0,0.3)'});btn.addEventListener('mouseleave',() => {btn.style.transform = 'translateY(0)';btn.style.boxShadow = '0 2px 10px rgba(0,0,0,0.3)'})});document.querySelectorAll('.service-card,.quote-card,.stat-card').forEach(card => {card.addEventListener('mouseenter',() => {card.style.transform = 'translateY(-5px)';card.style.boxShadow = '0 10px 25px rgba(0,0,0,0.2)'});card.addEventListener('mouseleave',() => {card.style.transform = 'translateY(0)';card.style.boxShadow = '0 2px 10px rgba(0,0,0,0.1)'})});document.querySelectorAll('.hero-features span').forEach(feature => {feature.addEventListener('mouseenter',() => {feature.style.transform = 'scale(1.05)';feature.style.background = 'var(--primary-color)';feature.style.color = 'var(--secondary-color)'});feature.addEventListener('mouseleave',() => {feature.style.transform = 'scale(1)';feature.style.background = 'rgba(212,165,116,0.1)';feature.style.color = 'var(--text-color)'})})} setupFormInteractions() {const forms = document.querySelectorAll('form');forms.forEach(form => {const inputs = form.querySelectorAll('input,textarea,select');inputs.forEach(input => {input.addEventListener('blur',() => {this.validateField(input)});input.addEventListener('input',() => {this.clearFieldError(input)});input.addEventListener('focus',() => {input.parentElement.classList.add('focused')});input.addEventListener('blur',() => {input.parentElement.classList.remove('focused')})});form.addEventListener('submit',(e) => {const submitBtn = form.querySelector('button[type="submit"]');if (submitBtn) {this.animateButtonLoading(submitBtn)} })})} validateField(field) {const value = field.value.trim();const fieldName = field.name || field.id;if (field.hasAttribute('required') && !value) {this.showFieldError(field,`${this.getFieldLabel(fieldName)} is verplicht`);return false} if (field.type === 'email' && value && !this.isValidEmail(value)) {this.showFieldError(field,'Voer een geldig emailadres in');return false} if (field.type === 'tel' && value && !this.isValidPhone(value)) {this.showFieldError(field,'Voer een geldig telefoonnummer in');return false} if (value) {this.showFieldSuccess(field)} return true} showFieldError(field,message) {this.clearFieldError(field);const errorDiv = document.createElement('div');errorDiv.className = 'field-error';errorDiv.textContent = message;errorDiv.setAttribute('role','alert');field.parentElement.classList.add('error');field.parentElement.appendChild(errorDiv);field.parentElement.classList.add('error-shake');setTimeout(() => {field.parentElement.classList.remove('error-shake')},500)} showFieldSuccess(field) {field.parentElement.classList.add('success');field.parentElement.classList.remove('error')} clearFieldError(field) {const errorDiv = field.parentElement.querySelector('.field-error');if (errorDiv) {errorDiv.remove()} field.parentElement.classList.remove('error')} animateButtonLoading(button) {const originalText = button.innerHTML;button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Bezig...';button.classList.add('loading');button.disabled = true;setTimeout(() => {button.innerHTML = originalText;button.classList.remove('loading');button.disabled = false},3000)} setupKeyboardNavigation() {const skipLink = document.querySelector('.skip-link');if (skipLink) {skipLink.addEventListener('click',(e) => {e.preventDefault();const target = document.querySelector(skipLink.getAttribute('href'));if (target) {target.focus();target.scrollIntoView({behavior:'smooth' })} })} document.addEventListener('keydown',(e) => {if (e.key === 'Escape') {this.closeAllModals()} });document.addEventListener('keydown',(e) => {if (e.key === 'Tab') {document.body.classList.add('keyboard-navigation')} });document.addEventListener('mousedown',() => {document.body.classList.remove('keyboard-navigation')})} setupTouchInteractions() {document.querySelectorAll('button,.btn-primary,.btn-secondary,.cta-button').forEach(btn => {btn.addEventListener('touchstart',() => {btn.style.transform = 'scale(0.95)'});btn.addEventListener('touchend',() => {btn.style.transform = 'scale(1)'})});let startX = 0;let startY = 0;document.addEventListener('touchstart',(e) => {startX = e.touches[0].clientX;startY = e.touches[0].clientY});document.addEventListener('touchend',(e) => {const endX = e.changedTouches[0].clientX;const endY = e.changedTouches[0].clientY;const diffX = startX - endX;const diffY = startY - endY;if (Math.abs(diffX) > Math.abs(diffY) && Math.abs(diffX) > 50) {if (diffX > 0) {this.closeMobileMenu()} else {this.openMobileMenu()} } })} setupAccessibilityFeatures() {this.createLiveRegion();if (window.matchMedia('(prefers-contrast:high)').matches) {document.body.classList.add('high-contrast')} if (window.matchMedia('(prefers-reduced-motion:reduce)').matches) {document.body.classList.add('reduced-motion')} this.setupModalFocusManagement()} createLiveRegion() {const liveRegion = document.createElement('div');liveRegion.setAttribute('aria-live','polite');liveRegion.setAttribute('aria-atomic','true');liveRegion.className = 'sr-only';liveRegion.style.cssText = ` position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0,0,0,0);white-space:nowrap;border:0;`;document.body.appendChild(liveRegion);this.liveRegion = liveRegion} announceToScreenReader(message) {if (this.liveRegion) {this.liveRegion.textContent = message} } setupModalFocusManagement() {} isValidEmail(email) {const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;return emailRegex.test(email)} isValidPhone(phone) {const phoneRegex = /^(\+31|0)[1-9][0-9]{8}$/;return phoneRegex.test(phone.replace(/\s/g,''))} getFieldLabel(fieldName) {const labels = {naam:'Naam',email:'Email',telefoon:'Telefoon',bericht:'Bericht' };return labels[fieldName] || fieldName} openMobileMenu() {const menu = document.querySelector('.nav-menu');const toggle = document.querySelector('.menu-toggle');if (menu && toggle) {menu.classList.add('active');toggle.classList.add('active');this.announceToScreenReader('Navigatiemenu geopend')} } closeMobileMenu() {const menu = document.querySelector('.nav-menu');const toggle = document.querySelector('.menu-toggle');if (menu && toggle) {menu.classList.remove('active');toggle.classList.remove('active');this.announceToScreenReader('Navigatiemenu gesloten')} } closeAllModals() {document.querySelectorAll('.modal').forEach(modal => {modal.classList.remove('active')})} showNotification(message,type = 'info') {this.announceToScreenReader(message)} animateElement(element,animationClass) {element.classList.add(animationClass);setTimeout(() => {element.classList.remove(animationClass)},1000)} } document.addEventListener('DOMContentLoaded',() => {window.uiInteractions = new UIInteractionsManager()});if (typeof module !== 'undefined' && module.exports) {module.exports = UIInteractionsManager} class LayoutSwitcher {constructor() {this.layouts = ['grid','masonry','zigzag'];this.currentLayout = 'grid';this.controlsContainer = null;this.buttons = [];this.grids = document.querySelectorAll('.services-grid');if (this.grids.length > 0) {this.init()} } init() {this.createLayoutControls();this.bindEvents()} createLayoutControls() {const controls = document.createElement('div');controls.className = 'layout-controls';controls.innerHTML = ` <div class="layout-controls-container"> <span class="layout-label">Layout:</span> <div class="layout-buttons"> <button class="layout-btn active" data-layout="grid" title="Grid Layout"> <i class="fas fa-th"></i> </button> <button class="layout-btn" data-layout="masonry" title="Masonry Layout"> <i class="fas fa-th-list"></i> </button> <button class="layout-btn" data-layout="zigzag" title="Zigzag Layout"> <i class="fas fa-random"></i> </button> </div> </div> `;const firstCategory = document.querySelector('.service-category');if (firstCategory) {firstCategory.parentNode.insertBefore(controls,firstCategory);this.controlsContainer = controls.querySelector('.layout-buttons');this.buttons = controls.querySelectorAll('.layout-btn')} } bindEvents() {if (this.controlsContainer) {this.controlsContainer.addEventListener('click',(e) => {const button = e.target.closest('.layout-btn');if (button) {const layout = button.dataset.layout;this.switchLayout(layout);this.updateActiveButton(button)} })} } switchLayout(layout) {if (!this.layouts.includes(layout) || layout === this.currentLayout) return;this.currentLayout = layout;this.grids.forEach(grid => {this.layouts.forEach(l => grid.classList.remove(l));if (layout !== 'grid') {grid.classList.add(layout)} grid.style.transition = 'all 0.5s ease';setTimeout(() => {grid.style.transition = ''},500)})} updateActiveButton(activeBtn) {this.buttons.forEach(btn => btn.classList.remove('active'));activeBtn.classList.add('active')} } document.addEventListener('DOMContentLoaded',() => {new LayoutSwitcher()});document.addEventListener('DOMContentLoaded',() => {const observerOptions = {threshold:0.1,rootMargin:'0px 0px -50px 0px' };const observer = new IntersectionObserver((entries) => {entries.forEach((entry,index) => {if (entry.isIntersecting) {setTimeout(() => {entry.target.style.opacity = '1';entry.target.style.transform = 'translateY(0) scale(1)'},index * 100)} })},observerOptions);const cards = document.querySelectorAll('.service-card');cards.forEach((card,index) => {card.style.opacity = '0';card.style.transform = 'translateY(50px) scale(0.9)';card.style.transition = `opacity 0.8s cubic-bezier(0.4,0,0.2,1),transform 0.8s cubic-bezier(0.4,0,0.2,1)`;card.style.transitionDelay = `${index * 0.1}s`;observer.observe(card)});cards.forEach(card => {card.addEventListener('click',function(e) {const ripple = document.createElement('span');const rect = this.getBoundingClientRect();const size = Math.max(rect.width,rect.height);const x = e.clientX - rect.left - size / 2;const y = e.clientY - rect.top - size / 2;ripple.style.cssText = ` position:absolute;width:${size}px;height:${size}px;left:${x}px;top:${y}px;background:rgba(212,165,116,0.3);border-radius:50%;transform:scale(0);animation:ripple 0.6s linear;pointer-events:none;`;this.appendChild(ripple);setTimeout(() => {ripple.remove()},600)})});const style = document.createElement('style');style.textContent = ` @keyframes ripple {to {transform:scale(2);opacity:0} } `;document.head.appendChild(style)});class PerformanceMonitor {constructor() {this.metrics = {};this.init()} init() {if (document.readyState === 'loading') {document.addEventListener('DOMContentLoaded',() => this.startMonitoring())} else {this.startMonitoring()} } startMonitoring() {this.measurePageLoad();this.measureResourceTiming();this.measureUserInteractions();this.setupPerformanceObserver()} measurePageLoad() {this.measureLCP();this.measureFID();this.measureCLS();this.measureFCP()} measureLCP() {if ('PerformanceObserver' in window) {const observer = new PerformanceObserver((list) => {const entries = list.getEntries();const lastEntry = entries[entries.length - 1];this.metrics.lcp = lastEntry.startTime;this.logMetric('LCP',lastEntry.startTime)});observer.observe({entryTypes:['largest-contentful-paint'] })} } measureFID() {if ('PerformanceObserver' in window) {const observer = new PerformanceObserver((list) => {const entries = list.getEntries();entries.forEach((entry) => {this.metrics.fid = entry.processingStart - entry.startTime;this.logMetric('FID',this.metrics.fid)})});observer.observe({entryTypes:['first-input'] })} } measureCLS() {if ('PerformanceObserver' in window) {let clsValue = 0;const observer = new PerformanceObserver((list) => {for (const entry of list.getEntries()) {if (!entry.hadRecentInput) {clsValue += entry.value} } this.metrics.cls = clsValue;this.logMetric('CLS',clsValue)});observer.observe({entryTypes:['layout-shift'] })} } measureFCP() {if ('PerformanceObserver' in window) {const observer = new PerformanceObserver((list) => {const entries = list.getEntries();entries.forEach((entry) => {if (entry.name === 'first-contentful-paint') {this.metrics.fcp = entry.startTime;this.logMetric('FCP',entry.startTime)} })});observer.observe({entryTypes:['paint'] })} } measureResourceTiming() {if ('PerformanceObserver' in window) {const observer = new PerformanceObserver((list) => {const entries = list.getEntries();entries.forEach((entry) => {if (entry.initiatorType === 'script' || entry.initiatorType === 'link') {this.logResourceTiming(entry)} })});observer.observe({entryTypes:['resource'] })} } measureUserInteractions() {document.addEventListener('click',(e) => {if (e.target.matches('button,.btn,a[href^="#"]')) {this.logInteraction('click',e.target.textContent || e.target.className)} });document.addEventListener('submit',(e) => {this.logInteraction('form_submit',e.target.className || 'unknown_form')});let maxScroll = 0;window.addEventListener('scroll',() => {const scrollPercent = Math.round((window.scrollY / (document.body.scrollHeight - window.innerHeight)) * 100);if (scrollPercent > maxScroll) {maxScroll = scrollPercent;this.metrics.maxScrollDepth = maxScroll} })} setupPerformanceObserver() {if ('PerformanceObserver' in window) {const observer = new PerformanceObserver((list) => {const entries = list.getEntries();entries.forEach((entry) => {if (entry.duration > 50) {this.logMetric('Long Task',entry.duration)} })});observer.observe({entryTypes:['longtask'] })} } logMetric(name,value) {}ms`);if (typeof gtag !== 'undefined') {gtag('event','performance_metric',{'metric_name':name,'metric_value':Math.round(value),'page_location':window.location.href })} } logResourceTiming(entry) {const loadTime = entry.responseEnd - entry.startTime;if (loadTime > 1000) {}ms)`)} } logInteraction(type,target) {if (typeof gtag !== 'undefined') {gtag('event','user_interaction',{'interaction_type':type,'interaction_target':target,'page_location':window.location.href })} } getPerformanceSummary() {return {...this.metrics,timestamp:new Date().toISOString(),userAgent:navigator.userAgent,connection:navigator.connection ? {effectiveType:navigator.connection.effectiveType,downlink:navigator.connection.downlink } :null }} exportData() {const data = this.getPerformanceSummary();const blob = new Blob([JSON.stringify(data,null,2)],{type:'application/json' });const url = URL.createObjectURL(blob);const a = document.createElement('a');a.href = url;a.download = `performance-${Date.now()}.json`;a.click();URL.revokeObjectURL(url)} } const performanceMonitor = new PerformanceMonitor();window.performanceMonitor = performanceMonitor;window.addEventListener('load',() => {setTimeout(() => {)},2000)});