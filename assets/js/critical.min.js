class PerformanceOptimizer {constructor() {this.init()} init() {this.preloadCriticalResources();this.optimizeImages();this.deferNonCriticalCSS();this.optimizeFonts();this.monitorPerformance()} preloadCriticalResources() {const criticalImages = [ 'assets/images/hero-bg.jpg','assets/images/about-team.jpg' ];criticalImages.forEach(src => {const link = document.createElement('link');link.rel = 'preload';link.as = 'image';link.href = src;document.head.appendChild(link)})} optimizeImages() {if ('IntersectionObserver' in window) {const imageObserver = new IntersectionObserver((entries,observer) => {entries.forEach(entry => {if (entry.isIntersecting) {const img = entry.target;img.src = img.dataset.src;img.classList.remove('lazy');observer.unobserve(img)} })});document.querySelectorAll('img[data-src]').forEach(img => {imageObserver.observe(img)})} this.addWebPSupport()} addWebPSupport() {const supportsWebP = () => {const canvas = document.createElement('canvas');canvas.width = 1;canvas.height = 1;return canvas.toDataURL('image/webp').indexOf('data:image/webp') === 0};if (supportsWebP()) {document.querySelectorAll('img[src$=".jpg"],img[src$=".jpeg"],img[src$=".png"]').forEach(img => {const webpSrc = img.src.replace(/\.(jpg|jpeg|png)$/,'.webp');const webpImg = new Image();webpImg.onload = () => {img.src = webpSrc};webpImg.src = webpSrc})} } deferNonCriticalCSS() {const nonCriticalCSS = [ 'assets/css/ui-enhancements.css','assets/css/seo-enhancements.css' ];nonCriticalCSS.forEach(href => {const link = document.createElement('link');link.rel = 'stylesheet';link.href = href;link.media = 'print';link.onload = () => {link.media = 'all'};document.head.appendChild(link)})} optimizeFonts() {const fontAwesomeLink = document.querySelector('link[href*="font-awesome"]');if (fontAwesomeLink) {fontAwesomeLink.href = fontAwesomeLink.href + '&display=swap'} } monitorPerformance() {if ('PerformanceObserver' in window) {new PerformanceObserver((list) => {const entries = list.getEntries();const lastEntry = entries[entries.length - 1];}).observe({entryTypes:['largest-contentful-paint'] });new PerformanceObserver((list) => {const entries = list.getEntries();entries.forEach(entry => {})}).observe({entryTypes:['first-input'] });new PerformanceObserver((list) => {const entries = list.getEntries();entries.forEach(entry => {if (!entry.hadRecentInput) {} })}).observe({entryTypes:['layout-shift'] })} window.addEventListener('load',() => {const perfData = performance.getEntriesByType('navigation')[0];})} } if (document.readyState === 'loading') {document.addEventListener('DOMContentLoaded',() => {new PerformanceOptimizer()})} else {new PerformanceOptimizer()} class ErrorHandler {constructor() {this.init()} init() {window.addEventListener('error',(event) => {this.handleError(event.error,'JavaScript Error')});window.addEventListener('unhandledrejection',(event) => {this.handleError(event.reason,'Unhandled Promise Rejection')});this.interceptFetch()} handleError(error,type) {console.error(`${type}:`,error);if (typeof gtag !== 'undefined') {gtag('event','exception',{'description':error.message || error,'fatal':false })} if (this.isCriticalError(error)) {this.showUserError()} } isCriticalError(error) {const criticalPatterns = [ 'NetworkError','Failed to fetch','ChunkLoadError','Loading chunk' ];return criticalPatterns.some(pattern => error.message && error.message.includes(pattern) )} showUserError() {const errorDiv = document.createElement('div');errorDiv.className = 'error-notification';errorDiv.innerHTML = ` <div class="error-content"> <i class="fas fa-exclamation-triangle"></i> <span>Er is een probleem opgetreden. De pagina wordt opnieuw geladen.</span> <button onclick="window.location.reload()" class="retry-btn">Opnieuw laden</button> </div> `;const style = document.createElement('style');style.textContent = ` .error-notification {position:fixed;top:20px;right:20px;background:#ff4444;color:white;padding:1rem;border-radius:8px;box-shadow:0 4px 12px rgba(0,0,0,0.3);z-index:10000;max-width:400px;animation:slideIn 0.3s ease} .error-content {display:flex;align-items:center;gap:0.5rem} .retry-btn {background:rgba(255,255,255,0.2);border:1px solid rgba(255,255,255,0.3);color:white;padding:0.25rem 0.5rem;border-radius:4px;cursor:pointer;font-size:0.8rem} .retry-btn:hover {background:rgba(255,255,255,0.3)} @keyframes slideIn {from {transform:translateX(100%);opacity:0} to {transform:translateX(0);opacity:1} } `;document.head.appendChild(style);document.body.appendChild(errorDiv);setTimeout(() => {if (errorDiv.parentNode) {errorDiv.parentNode.removeChild(errorDiv)} },10000)} interceptFetch() {const originalFetch = window.fetch;window.fetch = async (...args) => {try {const response = await originalFetch(...args);if (!response.ok) {throw new Error(`HTTP ${response.status}:${response.statusText}`)} return response} catch (error) {this.handleError(error,'Fetch Error');throw error} }} } document.addEventListener('DOMContentLoaded',() => {new ErrorHandler()});